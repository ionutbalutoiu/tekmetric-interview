# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/ionutbalutoiu/tekmetric-interview
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# This is for setting up multiple "ConfigMap" resources that will be mounted into the app container via:
#   * ".Values.app.envFrom" - for setting up environment variables.
#   * ".Values.app.volumes" and ".Values.app.volumeMounts" - for mounting them as files.
configMaps: {}
  # myConfigMap:
  #   name: "{{ .Release.Name }}-my-config-map"
  #   data:
  #     KEY: value
  #     TEST_VAR: test-value
  # secondConfigMap:
  #   name: "{{ .Release.Name }}-second-config-map"
  #   data:
  #     SECOND_VAR: second-test-value
  # configFiles:
  #   name: "{{ .Release.Name }}-config-files"
  #   data:
  #     sample-config.yaml: |-
  #       name: Sample Config File
  #     versions.yaml: |-
  #       version: 1.0.0

# This is for setting up multiple "Secret" resources that will be mounted into the app container via:
#   * ".Values.app.envFrom" - for setting up environment variables.
#   * ".Values.app.volumes" and ".Values.app.volumeMounts" - for mounting them as files.
secrets: {}
  # mySecret:
  #   name: "{{ .Release.Name }}-my-secret"
  #   data:
  #     DB_PASSWORD: super-secret-password
  # mySecondSecret:
  #   name: "{{ .Release.Name }}-my-second-secret"
  #   data:
  #     SECOND_SECRET: redacted
  # sshKeys:
  #   name: "{{ .Release.Name }}-ssh-keys"
  #   data:
  #     id_rsa: |
  #       -----
  #       REDACTED
  #       -----
  #     test_id_rsa: |
  #       -----
  #       TEST REDACTED
  #       -----

# Application configuration
app:
  # Override the default container image command.
  command: []

  # Override the default container image command arguments.
  args: []

  # This is setting up the environment variables for the app container from a configMap or secret.
  envFrom: []
    # - source: configMap                    # Valid values are: "configMap", "secret".
    #   name: "{{ .Release.Name }}-env-vars" # The name of the configMap or secret.

  # This is for setting up the app container ports. More information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  ports:
    - name: http
      number: 80

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  healthCheck:
    # Define the readiness probe for the app container.
    readinessProbe:
      # Specifies whether the readiness probe should be enabled
      enabled: true
      # Defines the readiness probe spec.
      spec:
        httpGet:
          path: /
          port: http

    # Define the liveness probe for the app container.
    livenessProbe:
      # Specifies whether the liveness probe should be enabled
      enabled: true
      # Defines the liveness probe spec.
      spec:
        httpGet:
          path: /
          port: http

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # Specifies whether a service should be created.
  enabled: true
  # This sets the service type. More information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the service port name.
  name: http
  # This sets the service port protocol. More information can be found here: https://kubernetes.io/docs/reference/networking/service-protocols/
  protocol: TCP
  # This sets the service port number. More information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80
  # This sets the service target port. More information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  targetPort: http

# This section is used for setting up the Prometheus service monitor. More information can be found here: https://github.com/prometheus-operator/prometheus-operator/blob/v0.78.1/Documentation/user-guides/getting-started.md#using-servicemonitors
serviceMonitor:
  # Specifies whether a service monitor should be created.
  enabled: false
  # This adds extra service monitor labels besides the common ones.
  labels: {}
  # This sets the service monitor port. It must correspond to the port name of the service. This parameter is required.
  port: http
  # This sets the service monitor path.
  path: /metrics

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# This is for setting up the pod disruption budget more information can be found here: https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget
pdb:
  # Specifies whether a pod disruption budget should be created
  enabled: false
  # This sets the PDB maxUnavailable field.
  maxUnavailable: 1
  # This sets the PDB minAvailable field.
  # minAvailable: 1

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
